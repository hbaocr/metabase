###################
# STAGE 1.4: main builder
###################

FROM arm64v8/openjdk:11.0.12-jdk-buster as builder

ARG MB_EDITION=oss
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD true
ENV PUPPETEER_EXECUTABLE_PATH /usr/bin/chromium
ENV FC_LANG en-US
ENV LC_CTYPE en_US.UTF-8

WORKDIR /home/circleci

# bash:    various shell scripts
# wget:    installing lein (TODO -- is this actually needed? We don't use wget directly)
# curl:    needed by script that installs Clojure CLI
# git:     ./bin/version
# yarn:    frontend building
# make:    backend building (TODO -- huh? We don't use Make to build the backend)
# gettext: translations
# java-cacerts: installs updated cacerts to /etc/ssl/certs/java/cacerts

RUN apt-get update -yq && apt-get install -yq git wget curl make gettext ca-certificates-java chromium

RUN curl -sL https://deb.nodesource.com/setup_15.x | bash - \
      && apt-get install -y nodejs \
      && npm install -g yarn


# lein:    backend dependencies and building
ADD https://raw.github.com/technomancy/leiningen/stable/bin/lein /usr/local/bin/lein
RUN chmod 744 /usr/local/bin/lein
RUN lein upgrade

# Clojure CLI (needed for some build scripts)
ADD https://download.clojure.org/install/linux-install-1.10.3.905.sh /tmp/linux-install-1.10.3.905.sh
RUN chmod +x /tmp/linux-install-1.10.3.905.sh
RUN /tmp/linux-install-1.10.3.905.sh

#COPY SOURCE
COPY . .

#build frontend
# try to reuse caching as much as possible
#COPY --from=frontend /home/circleci/.m2/repository/. /home/circleci/.m2/repository/.
#COPY --from=frontend /home/circleci/. .
RUN NODE_ENV=production MB_EDITION=$MB_EDITION yarn --frozen-lockfile && yarn build && bin/i18n/build-translation-resources


# build the app
RUN INTERACTIVE=false MB_EDITION=$MB_EDITION bin/build version drivers uberjar

# ###################
# # STAGE 2: runner
# ###################

## Remember that this runner image needs to be the same as bin/docker/Dockerfile with the exception that this one grabs the
## jar from the previous stage rather than the local build

FROM arm64v8/openjdk:11.0.12-jdk-buster as runner

ENV FC_LANG en-US LC_CTYPE en_US.UTF-8

RUN apt-get update -yq && apt-get install -yq git wget curl make gettext ca-certificates-java chromium

RUN curl -sL https://deb.nodesource.com/setup_15.x | bash - \
      && apt-get install -y nodejs \
      && npm install -g yarn

# lein:    backend dependencies and building
ADD https://raw.github.com/technomancy/leiningen/stable/bin/lein /usr/local/bin/lein
RUN chmod 744 /usr/local/bin/lein
RUN lein upgrade

# Clojure CLI (needed for some build scripts)
ADD https://download.clojure.org/install/linux-install-1.10.3.905.sh /tmp/linux-install-1.10.3.905.sh
RUN chmod +x /tmp/linux-install-1.10.3.905.sh
RUN /tmp/linux-install-1.10.3.905.sh


# dependencies
#RUN mkdir -p /app/certs && \
#    curl https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem -o /app/certs/rds-combined-ca-bundle.pem  && \
#    /opt/java/openjdk/bin/keytool -noprompt -import -trustcacerts -alias aws-rds -file /app/certs/rds-combined-ca-bundle.pem -keystore /etc/ssl/certs/java/cacerts -keypass changeit -storepass changeit && \
#    curl https://cacerts.digicert.com/DigiCertGlobalRootG2.crt.pem -o /app/certs/DigiCertGlobalRootG2.crt.pem  && \
#    /opt/java/openjdk/bin/keytool -noprompt -import -trustcacerts -alias azure-cert -file /app/certs/DigiCertGlobalRootG2.crt.pem -keystore /etc/ssl/certs/java/cacerts -keypass changeit -storepass changeit && \
#    mkdir -p /plugins && chmod a+rwx /plugins

# import AWS RDS cert into /etc/ssl/certs/java/cacerts
ADD https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem .
RUN keytool -noprompt -import -trustcacerts -alias aws-rds \
  -file rds-combined-ca-bundle.pem \
  -keystore /etc/ssl/certs/java/cacerts \
  -keypass changeit -storepass changeit



# add Metabase script and uberjar
COPY --from=builder /home/circleci/target/uberjar/metabase.jar /app/
#COPY bin/docker/run_metabase.sh /app/
COPY bin/docker/run_metabase_arm64v8.sh /app/

# expose our default runtime port
EXPOSE 3000

# run it
#ENTRYPOINT ["/app/run_metabase.sh"]
ENTRYPOINT ["/app/run_metabase_arm64v8.sh"]

